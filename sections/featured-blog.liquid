{% schema %}
{
  "name": "Blog Posts",
  "settings": [
    {
      "type": "blog",
      "id": "blog",
      "label": "Select Blog"
    },
    {
      "type": "range",
      "id": "post_limit",
      "label": "Number of Posts to Display",
      "default": 4,
      "min": 2,
      "max": 7,
      "step": 1
    },
    {
      "type": "checkbox",
      "id": "show_author",
      "label": "Show Author",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_date",
      "label": "Show Date",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_excerpt",
      "label": "Show Post Excerpt",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show 'View All' Link",
      "default": false
    },
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Blog Posts",
      "info": "This title will be displayed on the top left of the blog slider."
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
  ],
  "presets": [
    {
      "name": "Blog Posts",
      "category": "Blog"
    }
  ]
}
{% endschema %}

<style>
.blog-slider-container{
  background-color: rgb(var(--color-background));
}
.blog-card-content {
  background-color: rgb(var(--color-button));
  color: rgb(var(--color-text));
}
  .semicircle{
   background-color: rgb(var(--color-background)); 
  }
  .arrow{
   color: rgb(var(--color-foreground)); 
  }
</style>

<link rel="stylesheet" href="{{ 'blog-slider.css' | asset_url }}">

<div class="blog-slider-section color-{{ section.settings.color_scheme }}"  >
    <!-- Title Section -->
    <div class="blog-slider-title" >
       <h2>{{ section.settings.section_title }}</h2>
    </div>

    <!-- Arrow Buttons -->
    <div class="blog-arrow-buttons" >
        <button class="arrow arrow-left"  onclick="moveSlide(-1)">‹</button>
        <button class="arrow arrow-right"  onclick="moveSlide(1)">›</button>
    </div>
    
    <!-- Slider Container -->
    <div class="blog-slider-container color-{{ section.settings.color_scheme }} ">
        <div class="blog-slider-wrapper" id="sliderWrapper">
            {% assign blog_handle = section.settings.blog %}
            {% assign post_limit = section.settings.post_limit %}
          {% if blog_handle != blank and blogs[blog_handle].articles.size > 0 %}
            {% for article in blogs[blog_handle].articles limit: post_limit %}
            <div class="blog-card" >
                <!-- Semicircle divs -->
                <div class="semicircle semicircle-left" ><h6></h6></div>
                <div class="semicircle semicircle-right" ><h6></h6></div>

                {% if article.image %}
                    <img src="{{ article.image | img_url: '309x309', crop: 'center' }}" alt="{{ article.title }}">
                {% else %}
                  <div class="custom-placeholder" >
  {{ 'collection-1' | placeholder_svg_tag: 'placeholder-svg placeholder' }}
</div>

                {% endif %}
                <div class="blog-card-content color-{{ section.settings.color_scheme }}" >
                    <h3 class="blog-card-title" >{{ article.title | escape }}</h3>

                    {% if section.settings.show_author or section.settings.show_date %}
                        <div class="blog-meta">
                            {% if section.settings.show_author %}
                                <span class="blog-author" >{{ article.author }}</span>
                            {% endif %}
                            {% if section.settings.show_date %}
                                <span class="blog-date" >{{ article.published_at | date: "%B %d, %Y" }}</span>
                            {% endif %}
                        </div>
                    {% endif %}

                    {% if section.settings.show_excerpt %}
                        <p class="blog-excerpt" >{{ article.excerpt | strip_html | truncate: 200 }}</p>
                    {% endif %}

                    <a href="{{ article.url }}" class="blog-read-more-btn" >
                        Read more
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                            <polyline points="12 5 19 12 12 19"></polyline>
                        </svg>
                    </a>
                </div>
            </div>
            {% endfor %}
          {% else %}
                <!-- Placeholder Blog Cards for Preview with Default Image -->
                {% for i in (1..4) %}
                    <div class="blog-card color-{{ section.settings.color_scheme }}" >
                        <!-- Semicircle divs -->
                        <div class="semicircle semicircle-left" style="position: absolute; width: 20px; height: 20px; border-radius: 50%; z-index: 2; left: -8px; top: 48%; transform: translateY(-50%);" ><h6></h6></div>
                        <div class="semicircle semicircle-right" style="position: absolute; width: 20px; height: 20px; border-radius: 50%; z-index: 2; right: -8px; top: 48%; transform: translateY(-50%);" ><h6></h6></div>

                        <!-- Default Placeholder Image -->
                        {{ 'collection-1' | placeholder_svg_tag: 'placeholder-svg placeholder'}}

                        <div class="blog-card-content">
                            <h3 class="blog-card-title" >Sample Blog Post {{ i }}</h3>

                            {% if section.settings.show_author or section.settings.show_date %}
                                <div class="blog-meta">
                                    {% if section.settings.show_author %}
                                        <span class="blog-author" >John Doe</span>
                                    {% endif %}
                                    {% if section.settings.show_date %}
                                        <span class="blog-date" >January {{ i }}, 2024</span>
                                    {% endif %}
                                </div>
                            {% endif %}

                            {% if section.settings.show_excerpt %}
                                <p class="blog-excerpt" >This is a preview of how your blog post will look. Select a blog to display your actual content.</p>
                            {% endif %}

                            <a href="#" class="blog-read-more-btn" >
                                Read more
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <line x1="5" y1="12" x2="19" y2="12"></line>
                                    <polyline points="12 5 19 12 12 19"></polyline>
                                </svg>
                            </a>
                        </div>
                    </div>
                {% endfor %}
            {% endif %}

        </div>
    </div>

    {% if section.settings.show_view_all %}
        <div class="blog-view-all-link">
            <a href="{{ blogs[blog_handle].url }}" class="blog-view-all">
                View All Posts
            </a>
        </div>
    {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentSlide = 0;
    const sliderWrapper = document.getElementById('sliderWrapper');
    const leftArrow = document.querySelector('.arrow-left');
    const rightArrow = document.querySelector('.arrow-right');
    const gap = 20;  // Gap between cards

    function updateCards() {
        // Get all current cards and update total slides
        const cards = sliderWrapper.querySelectorAll('.blog-card');
        const totalSlides = cards.length;

        // Function to calculate the width of a single card, including the gap
        function getSlideWidth() {
            const cardWidth = cards[0]?.offsetWidth || 0;
            return cardWidth + gap;  // Include the gap in the card width
        }

        // Function to update the state of the arrows (disabled or not)
        function updateArrowState() {
            const visibleSlides = getVisibleSlides();
            leftArrow.disabled = currentSlide === 0;
            rightArrow.disabled = currentSlide >= totalSlides - visibleSlides;
        }

        // Function to calculate how many slides are visible based on screen width
        function getVisibleSlides() {
            let visibleSlides = 0;
            if (window.innerWidth < 768) {
                visibleSlides = totalSlides <= 1 ? totalSlides : 1;  // Small screens show 1 card
            } else if (window.innerWidth < 1024) {
                visibleSlides = totalSlides <= 3 ? totalSlides : 3;  // Medium screens show 3 cards
            } else {
                visibleSlides = totalSlides <= 4 ? totalSlides : 4;  // Large screens show 4 cards
            }
            return visibleSlides;
        }

        // Resize the cards to fit exactly the visible number of cards
        function resizeCards() {
            const visibleSlides = getVisibleSlides();
            const cardWidthPercentage = (95 / visibleSlides);  // Percentage of screen for each card
            // Update the flex basis for each card dynamically
            cards.forEach(card => {
                card.style.flex = `0 0 ${cardWidthPercentage}%`;
            });
        }

        // Function to move the slider based on direction (left or right)
        window.moveSlide = function(direction) {
            const visibleSlides = getVisibleSlides();
            const maxSlides = totalSlides - visibleSlides;

            // Update the currentSlide index with bounds checking
            currentSlide = Math.min(Math.max(currentSlide + direction, 0), maxSlides);

            // Calculate the slide width (including the gap) and the offset
            const slideWidth = getSlideWidth();
            const offset = -currentSlide * slideWidth;

            // Apply the translation to the slider wrapper
            sliderWrapper.style.transform = `translateX(${offset}px)`;
            updateArrowState();
        };

        // Initialize card size and layout on page load
        resizeCards();
        updateArrowState();

        // Resize the cards when the window is resized
        let resizeTimer;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                resizeCards();  // Resize cards on window resize
                const visibleSlides = getVisibleSlides();
                const maxSlides = totalSlides - visibleSlides;
                currentSlide = Math.min(currentSlide, maxSlides);

                // Recalculate the offset based on the new window size and card width
                const slideWidth = getSlideWidth();
                const offset = -currentSlide * slideWidth;

                // Apply the calculated translation to the slider wrapper
                sliderWrapper.style.transform = `translateX(${offset}px)`;
                updateArrowState();
            }, 250);
        });
    }

    // Initialize the slider on page load
    updateCards();

    // Monitor for changes in the number of cards (e.g., if blogs are added or removed)
    const observer = new MutationObserver(updateCards);
    observer.observe(sliderWrapper, { childList: true });
});
</script>
