{% schema %}
{
  "name": "Blog Post",
  "settings": [
    {
      "type": "blog",
      "id": "blog",
      "label": "Select Blog"
    },
    {
      "type": "number",
      "id": "post_limit",
      "label": "Number of Posts to Display",
      "default": 8
    },
    {
      "type": "checkbox",
      "id": "show_author",
      "label": "Show Author",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_date",
      "label": "Show Date",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_excerpt",
      "label": "Show Post Excerpt",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show 'View All' Link",
      "default": true
    },
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Latest Blog Posts",
      "info": "This title will be displayed on the top left of the blog slider."
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "card_bg_color",
      "label": "Card Background Color",
      "default": "#f0f0f8"
    }
  ],
  "presets": [
    {
      "name": "Blog Post",
      "category": "Blog"
    }
  ]
}
{% endschema %}


<link rel="stylesheet" href="{{ 'blog-slider.css' | asset_url }}">

<div class="blog-slider-section" style="background-color: {{ section.settings.background_color }};">
    <!-- Title Section -->
    <div class="blog-slider-title" style="color: {{ section.settings.text_color }};">
        <h2>{{ section.settings.section_title }}</h2>
    </div>

    <!-- Arrow Buttons -->
    <div class="blog-arrow-buttons">
        <button class="arrow arrow-left" onclick="moveSlide(-1)">‹</button>
        <button class="arrow arrow-right" onclick="moveSlide(1)">›</button>
    </div>
    
    <!-- Slider Container -->
    <div class="blog-slider-container">
        <div class="blog-slider-wrapper" id="sliderWrapper">
            {% assign blog_handle = section.settings.blog %}
            {% assign post_limit = section.settings.post_limit %}
            {% for article in blogs[blog_handle].articles limit: post_limit %}
            <div class="blog-card" style="background-color: {{ section.settings.background_color }};">
                <!-- Semicircle divs -->
        <div class="semicircle semicircle-left"  style="background-color: {{ section.settings.background_color }};"><h6></h6></div>
        <div class="semicircle semicircle-right"  style="background-color: {{ section.settings.background_color }};"><h6></h6></div>

                {% if article.image %}
                    <img src="{{ article.image | img_url: '450x300', crop: 'center' }}" alt="{{ article.title }}">
                {% else %}
                    <img src="{{ 'default-image.jpg' | asset_url }}" alt="Default Image">
                {% endif %}
                <div class="blog-card-content" style="background-color: {{ section.settings.card_bg_color }};">
                    <h3 class="blog-card-title" style="color: {{ section.settings.text_color }};">{{ article.title | escape }}</h3>

                    {% if section.settings.show_author or section.settings.show_date %}
                        <div class="blog-meta">
                            {% if section.settings.show_author %}
                                <span class="blog-author" style="color: {{ section.settings.text_color }}">{{ article.author }}</span>
                            {% endif %}
                            {% if section.settings.show_date %}
                                <span class="blog-date" style="color: {{ section.settings.text_color }}">{{ article.published_at | date: "%B %d, %Y" }}</span>
                            {% endif %}
                        </div>
                    {% endif %}

                    {% if section.settings.show_excerpt %}
                        <p class="blog-excerpt" style="color: {{ section.settings.text_color }};">{{ article.excerpt | strip_html | truncate: 200 }}</p>
                    {% endif %}

                    <a href="{{ article.url }}" class="blog-read-more-btn" style="background-color: {{ section.settings.text_color }}; color: {{ section.settings.background_color }};">
                        Read more
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                            <polyline points="12 5 19 12 12 19"></polyline>
                        </svg>
                    </a>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>

    {% if section.settings.show_view_all %}
        <div class="view-all-link">
            <a href="{{ blogs[blog_handle].url }}" class="blog-view-all" style="color: {{ section.settings.text_color }}; border-color: {{ section.settings.text_color }};">
                View All Posts
            </a>
        </div>
    {% endif %}
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentSlide = 0;
    const sliderWrapper = document.getElementById('sliderWrapper');
    const cards = sliderWrapper.querySelectorAll('.blog-card');
    const totalSlides = cards.length;
    const leftArrow = document.querySelector('.arrow-left');
    const rightArrow = document.querySelector('.arrow-right');
    const gap = 20;  // Gap between cards

    // Function to calculate the width of a single card, including the gap
    function getSlideWidth() {
        const cardWidth = cards[0].offsetWidth;
        return cardWidth + gap;  // Include the gap in the card width
    }

    // Function to update the state of the arrows (disabled or not)
    function updateArrowState() {
        const visibleSlides = getVisibleSlides();
        leftArrow.disabled = currentSlide === 0;
        rightArrow.disabled = currentSlide >= totalSlides - visibleSlides;
    }

    // Function to calculate how many slides are visible based on screen width
    function getVisibleSlides() {
        let visibleSlides = 0;
        if (window.innerWidth < 768) {
            visibleSlides = totalSlides <= 1 ? totalSlides : 1;  // Small screens show 1 card
        } else if (window.innerWidth < 1024) {
            visibleSlides = totalSlides <= 3 ? totalSlides : 3;  // Medium screens show 3 cards
        } else {
            visibleSlides = totalSlides <= 4 ? totalSlides : 4;  // Large screens show 4 cards
        }
        return visibleSlides;
    }

    // Resize the cards to fit exactly the visible number of cards
    function resizeCards() {
        const visibleSlides = getVisibleSlides();
        const cardWidthPercentage = (100 / visibleSlides);  // Percentage of screen for each card
        // Update the flex basis for each card dynamically
        cards.forEach(card => {
            card.style.flex = `0 0 ${cardWidthPercentage}%`;
        });
    }

    // Function to move the slider based on direction (left or right)
    window.moveSlide = function(direction) {
        const visibleSlides = getVisibleSlides();
        const maxSlides = totalSlides - visibleSlides;

        // Update the currentSlide index with bounds checking
        currentSlide = Math.min(Math.max(currentSlide + direction, 0), maxSlides);

        // Calculate the slide width (including the gap) and the offset
        const slideWidth = getSlideWidth();
        const offset = -currentSlide * slideWidth;

        // Apply the translation to the slider wrapper
        sliderWrapper.style.transform = `translateX(${offset}px)`;
        updateArrowState();
    };

    // Initialize the state of the arrows
    updateArrowState();

    let resizeTimer;
    // Event listener to handle window resize
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function() {
            resizeCards();  // Resize cards when window is resized
            const visibleSlides = getVisibleSlides();
            const maxSlides = totalSlides - visibleSlides;
            currentSlide = Math.min(currentSlide, maxSlides);

            // Recalculate the offset based on the new window size and card width
            const slideWidth = getSlideWidth();
            const offset = -currentSlide * slideWidth;

            // Apply the calculated translation to the slider wrapper
            sliderWrapper.style.transform = `translateX(${offset}px)`;
            updateArrowState();
        }, 250);
    });

    // Initialize card size and layout on page load
    resizeCards();
});



</script>
