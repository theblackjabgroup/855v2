<style>
  @import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap');
        :root {
            --primary-card-top-padding: 40px;
        }

        .icon-with-text-2 {
          display: flex;
          flex-direction: column;
          gap: 20px;
          padding: 20px 0;
          background: rgb(var(--color-background));
        }

        .primary-card-container {
            min-height: calc(332px - var(--primary-card-top-padding));
            width: 264px;
            background: var(--card_background);
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            gap: 30px;
            align-items: center;
            padding-top: var(--primary-card-top-padding);
            scroll-snap-align: start; /* Align each card to the start of the container */
            position: relative;
            flex-shrink: 0;
            overflow: hidden;
        }

        .card-feature-image {
            height: 104px;
            width: 104px;
            background: rgba(0,0,0, 0.15);
            border-radius: 2px;
            z-index: 1;
        }

        .card-main-heading {
            font-family: 'Open Sans';
            font-weight: 600;
            font-size: 24px;
            line-height: 32.68px;
            text-align: center;
            color: rgb(var(--color-foreground));
            z-index: 1;
        }

        .card-action-button {
            position: absolute;
            background: rgb(var(--color-button-text));
            bottom: 12px;
            right: 12px;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: xx-large;
            cursor: pointer;
            transition: transform 0.3s ease;
            z-index: 1;
        }

        .card-action-button.active {
            transform: rotate(45deg);
        }

        .scroll-container {
            position: relative;
            width: 100%;
            display: flex;
            align-items: center;
            overflow-x: hidden;
            scrollbar-width: none;
            background-color: rgb(var(--color-background));
        }

        .card-container {
            display: flex;
            align-items: center;
            gap: 20px;
            overflow-x: auto;
            scroll-behavior: smooth;
            scroll-snap-type: x mandatory; /* Enable horizontal snap scrolling */
            scrollbar-width: none;
            width: calc(100% - 106px);
            margin: 0 53px;
        }

        .side-decoration {
            width: 33px;
            height: 40px;
            background: rgb(var(--color-background));
            position: absolute;
            top: 125px;
            display: block !important;
        }

        .side-decoration-left {
            left: -17px;
        }

        .side-decoration-right {
            right: -17px;
        }

        .scroll-button {
            display: flex;
            align-items: center;
            justify-content: center;
            background: none;
            border: 2px solid rgb(var(--color-secondary-button-text));
            border-radius: 50%;
            height: 40px;
            width: 40px;
            font-size: larger;
            cursor: pointer;
            position: absolute;
            z-index: 1;
        }

        .scroll-button.next {
            right: 10px;
        }

        .card-description-text {
            transform: translateY(100%);
            transition: transform 0.3s ease-in-out;
            z-index: 1;
        }

        .card-description-text.show {
            transform: translateY(0);
        }
        .background-decoration {
            display: block !important;
            position: absolute;
            top: 100%;
            left: 100%;
            border-radius: 100%;
            height: 100%;
            width: 100%;
            background: var(--card_foreground);
            transition: all 0.5s ease;
            z-index: 0;
        }
        .background-decoration.show {
          border-radius: 0;
          top: 0;
          left: 0;
        }

        .icon-with-text-2-dots {
          display: flex;
          gap: 1rem;
          justify-content: center;
        }

        .icon-with-text-2-dot {
          background: rgb(var(--color-foreground));
          display: block !important;
          width: 6px;
          height: 6px;
          border-radius: 50%;
          transition: all 0.45s ease;
          margin: 0 !important;
        }

        .icon-with-text-2-dot.active {
          width: 23px;
          border-radius: 13px;
        }
    </style>
    <div class="icon-with-text-2 color-{{ section.settings.sectionColor }}">
      <div class="scroll-container" id="section-{{ section.id }}">
        <div class="card-container" id="cardContainer">
          {% for item in section.blocks %}
            <div class="primary-card-container">
              <div class="card-feature-image">
                {% if item.settings.icon-with-text-icon %}
                  <img src="{{ item.settings.icon-with-text-icon | image_url }}" width="500" height="500" alt="icon" style="width:100%; height:100%; object-fit:cover; border-radius: inherit;">
                  {% else %}
                  <div style="width:100%; height:100%;">{{ 'image' | placeholder_svg_tag: 'placeholder-svg' | replace: 'svg', 'svg style="width:100%; height:100%; scale:2"' }}</div>
                {% endif %}
                </div>
                <div class="card-main-heading">{{ item.settings.icon-with-text-title }}</div>
                <div class="card-description-text">{{ item.settings.icon-with-text-description }}</div>
                <div class="card-action-button">
                  <span style="width:12px; height:12px; color:rgb(var(--color-secondary-button-text));" class="svg-wrapper">{{- 'icon-plus.svg' | inline_asset_content -}}</span>
                  </div>
                  <div class="side-decoration side-decoration-left"></div>
                  <div class="side-decoration side-decoration-right"></div>
                  <div class="background-decoration"></div>
                  </div>
                {% endfor %}
                <button class="scroll-button next">
                  <span style="width:24px; height:24px; color:rgb(var(--color-secondary-button-text)); rotate:-90deg;" class="svg-wrapper">{{- 'icon-caret.svg' | inline_asset_content -}}</span>
                </button>
                </div>
                </div>
                <div class="icon-with-text-2-dots">
                  {% for item in section.blocks %}
                    <div class="icon-with-text-2-dot"></div>
                  {% endfor %}
                </div>
                </div>

<script>
class CardSlider {
  constructor(sectionId) {
    this.container = document.querySelector(`#section-${sectionId} .card-container`);
    this.dots = document.querySelectorAll(`#section-${sectionId} ~ .icon-with-text-2-dots .icon-with-text-2-dot`);
    this.currentCard = 0;
    if (!this.container) return;
    this.init();
  }

  init() {
    const scrollButton = this.container.querySelector('.scroll-button');
    scrollButton?.addEventListener('click', () => this.scrollCards());

    this.container.querySelectorAll('.card-action-button')
      .forEach(button => button.addEventListener('click', () => this.toggleDescription(button)));

    this.container.addEventListener('scroll', () => {
      const cardWidth = this.container.querySelector('.primary-card-container').offsetWidth + 20;
      this.currentCard = Math.round(this.container.scrollLeft / cardWidth);
    });

    // Add intersection observer for dots
    const cards = this.container.querySelectorAll('.primary-card-container');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const index = Array.from(cards).indexOf(entry.target);
          this.updateDots(index);
        }
      });
    }, {
      root: null,
      threshold: 0.75
    });

    cards.forEach(card => observer.observe(card));
  }

  toggleDescription(button) {
    const card = button.closest('.primary-card-container');
    button.classList.toggle('active');
    card.querySelector('.card-description-text').classList.toggle('show');
    card.querySelector('.background-decoration').classList.toggle('show');
  }

  scrollCards() {
    const cardWidth = this.container.querySelector('.primary-card-container').offsetWidth + 20;
    const totalCards = this.container.querySelectorAll('.primary-card-container').length;
    this.currentCard = (this.currentCard + 1) % totalCards;
    this.container.scrollTo({
      left: this.currentCard * cardWidth,
      behavior: 'smooth'
    });
  }

  updateDots(activeIndex) {
    this.dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === activeIndex);
    });
  }
}

document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[id^="section-"]')
    .forEach(section => new CardSlider(section.id.replace('section-', '')));
});
</script>

{% schema %}
{
  "name": "Icon With Text 2",
  "tag": "section",
  "disabled_on": {
    "groups": ["aside", "footer", "header"]
  },
  "settings": [
    {
      "type": "color_scheme",
      "label": "Section Color",
      "id": "sectionColor",
      "default": "scheme_1"
    }
  ],
  "blocks": [
    {
      "type": "card",
      "name": "card",
      "settings": [
        {
          "type": "image_picker",
          "id": "icon-with-text-icon",
          "label": "Select Icon"
        },
        {
          "type": "text",
          "id": "icon-with-text-title",
          "label": "Enter Title",
          "default": "Heading"
        },
        {
          "type": "text",
          "id": "icon-with-text-description",
          "label": "Enter Description",
          "default": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Icon With Text 2",
      "blocks": [
        {
          "type": "card"
        },
        {
          "type": "card"
        },
        {
          "type": "card"
        },
        {
          "type": "card"
        }
      ]
    }
  ]
}
{% endschema %}
