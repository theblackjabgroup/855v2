<script src="{{ 'image-with-text.js' | asset_url }}" defer></script>
{{ 'image-with-text.css' | asset_url | stylesheet_tag }}

{% style %}
  :root {
    --card-color-scheme: {{ section.settings.card_color_scheme }};
    --section-color: {{ section.settings.sectionColor }};
  }
{% endstyle %}

<div class="image__with__text__section color-{{ section.settings.sectionColor }}" data-section-id="{{ section.id }}">
  <div class="image__with__text__outer__container">
    <ul class="image__with__text__inner__container">
      {% for item in section.blocks %}
        <li
          class="image__with__text__card min__card__height card__set card"
          aria-labelledby="gallery-item-{{ forloop.index0}}-trigger"
          tabindex="-1"
          id="gallery-item-{{ forloop.index0 }}"
          style="--current-item: {{ forloop.index0 }}"
          data-heading="{{ item.settings.heading }}"
          data-description="{{ item.settings.description }}"
          data-link="{{ item.settings.url }}"
        >
          <div class="media__container">
            {% if item.settings.image %}
              <img width="1800" height="1600" class="media" src="{{ item.settings.image |  image_url  }}" alt="">
            {% else %}
              {% comment %} <div
                style="display: block !important; position: absolute; height: 100%; width: 1px; background-color: rgb(var(--color-foreground)); rotate: 45deg; left: 50%;"
              ></div>
              <div
                style="display: block !important; position: absolute; height: 100%; width: 1px; background-color: rgb(var(--color-foreground)); rotate: -45deg; left: 50%;"
              ></div> {% endcomment %}
              <div style="width: 100%; height: 100%;">{{ 'hero-apparel-2' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            {% endif %}
          </div>
        </li>
      {% endfor %}
      <div class="info__banner color-{{ section.settings.bannerColor }}">
        <div class="info__banner__contents">
          <p class="info__banner__title inter-medium">NEW ARRIVAL</p>
          <h1 class="info__banner__heading fira-sans-bold">Thanksgiving big billion sale!</h1>
          <div class="info__banner__details">
            <p class="info__banner__description inter-regular ">
              Enhance patient care with our premium medical product, featuring advanced technology for precision and
              reliability. Ideal for seamless integration into any practice!
            </p>
            <a class="info__banner__shopnow__button color-{{ section.settings.bannerColor }}">Shop Now</a>
          </div>
          <span id="info__banner__expand__button" class="svg-wrapper">
            {{- 'icon-arrow.svg' | inline_asset_content -}}
          </span>
        </div>
        <ul class="dot-items color-{{ section.settings.bannerColor }}">
          {% for item in section.blocks %}
            <li class="dot-item">
              <a id="gallery-item-{{ forloop.index0 }}-trigger" href="#gallery-item-{{ forloop.index0 }}"> </a>
            </li>
          {% endfor %}
        </ul>
      </div>
    </ul>
  </div>
</div>

<script>
  // Select all dots, image containers, and banner elements
const dotItems = document.querySelectorAll('.dot-item');
const cards = document.querySelectorAll('.image__with__text__card');
const container = document.querySelector('.image__with__text__outer__container');

// Select elements for updating the banner content
const bannerHeading = document.querySelector('.info__banner__heading');
const bannerDescription = document.querySelector('.info__banner__description');
const bannerLink = document.querySelector('.info__banner__shopnow__button');

let ticking = false; // Prevent multiple events from being processed at once

// Function to update the banner content based on the current slide
const updateBannerContent = (currentIndex) => {
  console.log("Current Index:", currentIndex);
  const currentCard = cards[currentIndex];
  if (currentCard) {
    const heading = currentCard.getAttribute('data-heading');
    const description = currentCard.getAttribute('data-description');
    const link = currentCard.getAttribute('data-link');
    console.log("Banner Content:", heading, description, link);

    // Update the banner content
    bannerHeading.textContent = heading || "Default Heading";
    bannerDescription.textContent = description || "Default Description";
    if (link) {
      bannerLink.href = link;
    }
  }
};

// Function to update dot scaling based on scroll position
const updateDotScaling = () => {
  const scrollPosition = container.scrollLeft;
  const galleryWidth = cards[0].offsetWidth;

   // Calculate which two items are involved in the transition
  const currentIndex = Math.floor(scrollPosition / galleryWidth);
  const percentageScrolled = (scrollPosition % galleryWidth) / galleryWidth;
  
  // Reset all dots to the default size
  dotItems.forEach(dot => {
    dot.style.width = '8px';
    dot.style.height = '8px';
  });

  // Scale the current dot and next dot based on scroll position
  if (dotItems[currentIndex]) {
    dotItems[currentIndex].style.width = `${48 - (percentageScrolled * 40)}px`;
  }

  if (dotItems[currentIndex + 1]) {
    dotItems[currentIndex + 1].style.width = `${8 + (percentageScrolled * 40)}px`;
  }

  // Update the banner content based on the exact current index
  updateBannerContent(Math.round(scrollPosition / galleryWidth));
};

// Throttled scroll handler using requestAnimationFrame
const onScroll = () => {
  if (!ticking) {
    window.requestAnimationFrame(() => {
      updateDotScaling();
      ticking = false;
    });
    ticking = true;
  }
};

// Listen to scroll events on the container
container.addEventListener('scroll', onScroll);

// Set up initial state
document.addEventListener('DOMContentLoaded', () => {
  dotItems[0].style.width = '48px';  // The first dot starts as the active one
  updateBannerContent(0); // Initialize banner content with the first card
});

// Expand button functionality for showing/hiding banner details
const infoBannerExpandButton = document.getElementById('info__banner__expand__button');
const infoBannerDetails = document.querySelector('.info__banner__details');

// Add click event listener to toggle the "show" class
infoBannerExpandButton.addEventListener('click', () => {
  infoBannerDetails.classList.toggle('show');
  infoBannerExpandButton.classList.toggle('show');
});
</script>

{% schema %}
{
  "name": "Image With Text",
  "settings": [
    {
      "type": "color_scheme",
      "id": "sectionColor",
      "label": "Section Color"
    },
    {
      "type": "color",
      "id": "card_color_scheme",
      "label": "Card Color"
    },
    {
      "type": "color_scheme",
      "label": "Banner Color",
      "id": "bannerColor",
      "default": "#000000"
    }
  ],
  "blocks": [
    {
      "type": "card",
      "name": "Card",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Select Image"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "heading",
          "default": "Thanksgiving big billion sale!"
        },
        {
          "type": "text",
          "id": "description",
          "label": "decription",
          "default":"Enhance patient care with our premium medical product, featuring advanced technology for precision and reliability. Ideal for seamless integration into any practice!"
        },
        {
          "type": "url",
          "id": "url",
          "label": "link",
          "default":"/"
        },
        {
          "type": "color",
          "id": "captionColor",
          "label": "Text Color",
          "default": "#000000"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Image With Text",
      "blocks": [
        {
          "type": "card"
        },
        {
          "type": "card"
        },
        {
          "type": "card"
        },
        {
          "type": "card"
        }
      ]
    }
  ]
}
{% endschema %}
