{{ 'image-with-text.css' | asset_url | stylesheet_tag }}

{% style %}
  :root  {
    --section-color: {{ section.settings.sectionBackground }};
  }
{% endstyle %}

<div
  class="image__with__text__section "
  data-section-id="{{ section.id }}"
  data-autoplay="{{ section.settings.autoplay }}">
  <div class="image__with__text__outer__container">
    <ul class="image__with__text__inner__container">
      {% for item in section.blocks %}
        <li
          class="image__with__text__card min__card__height card__set card"
          aria-labelledby="gallery-item-{{ forloop.index0}}-trigger"
          tabindex="-1"
          id="gallery-item-{{ forloop.index0 }}"
          style="--current-item: {{ forloop.index0 }}"
          data-heading="{{ item.settings.heading }}"
          data-description="{{ item.settings.description }}"
          data-link="{{ item.settings.url }}"
          btn-text="{{ item.settings.btnText }}"
          data-heading-tag="{{ item.settings.headingTag }}">
          <div class="media__container">
            {% if item.settings.image %}
              <img
                width="1800"
                height="1600"
                class="media"
                src="{{ item.settings.image |  image_url  }}"
                alt="">
            {% else %}
              <div style="width: 100%; height: 100%;">
                {{ 'collection-1' | placeholder_svg_tag: 'placeholder-svg' }}
              </div>
            {% endif %}
          </div>
        </li>
      {% endfor %}
      <div class="info__banner color-{{ section.settings.bannerColor }}">
        <div class="info__banner__contents">
          <p class="info__banner__title inter-medium">NEW ARRIVAL</p>
          <h1 class="info__banner__heading fira-sans-bold">Thanksgiving big billion sale!</h1>
          <div class="info__banner__details">
            <p class="info__banner__description inter-regular ">
              Enhance patient care with our premium medical product, featuring advanced technology for precision and 
              reliability. Ideal for seamless integration into any practice!
            </p>
            <a
              href=""
              style="color: rgb(var(--color-secondary-button-text)); background: rgb(var(--color-button-text));"
              class="info__banner__shopnow__button link color-{{ section.settings.bannerColor }}">Shop Now</a>
          </div>
          <span id="info__banner__expand__button" class="svg-wrapper">
            {{- 'icon-arrow.svg' | inline_asset_content -}}
          </span>
        </div>
        <ul class="dot-items color-{{ section.settings.bannerColor }}">
          {% for item in section.blocks %}
            <li class="dot-item">
              <a id="gallery-item-{{ forloop.index0 }}-trigger" href="#gallery-item-{{ forloop.index0 }}"></a>
            </li>
          {% endfor %}
        </ul>
      </div>
    </ul>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const AUTOPLAY_INTERVAL = 3000;

  // Find all instances of the section
  const sections = document.querySelectorAll('.image__with__text__section');

  sections.forEach((section) => {
    const container = section.querySelector('.image__with__text__outer__container');
    const dotItems = section.querySelectorAll('.dot-item');
    const cards = section.querySelectorAll('.image__with__text__card');

    // Check if autoplay is enabled
    const autoplayEnabled = section.getAttribute('data-autoplay') === 'true';

    // Banner elements specific to this section
    const bannerHeadingTag = section.querySelector('.info__banner__title');
    const bannerHeading = section.querySelector('.info__banner__heading');
    const bannerDescription = section.querySelector('.info__banner__description');
    const bannerLink = section.querySelector('.info__banner__shopnow__button');
    const infoBannerExpandButton = section.querySelector('#info__banner__expand__button');
    const infoBannerDetails = section.querySelector('.info__banner__details');

    let ticking = false;
    let autoplayInterval;

    // Function to update the banner content based on the current slide
    const updateBannerContent = (currentIndex) => {
      const currentCard = cards[currentIndex];
      if (currentCard) {
        const heading = currentCard.getAttribute('data-heading');
        const description = currentCard.getAttribute('data-description');
        const link = currentCard.getAttribute('data-link');
        const btnText = currentCard.getAttribute('btn-text');
        const headingTag = currentCard.getAttribute('data-heading-tag');

        // Update the banner content
        bannerHeadingTag.textContent = headingTag || "  ";
        bannerHeading.textContent = heading || "Default Heading";
        bannerDescription.textContent = description || "Default Description";
        bannerLink.textContent = btnText || "Default Button Text";
        if (link) {
          bannerLink.href = link;
        }
      }
    };

    // Function to update dot scaling based on scroll position
    const updateDotScaling = () => {
      const scrollPosition = container.scrollLeft;
      const galleryWidth = cards[0].offsetWidth;

      const currentIndex = Math.round(scrollPosition / galleryWidth);
      const percentageScrolled = (scrollPosition % galleryWidth) / galleryWidth;

      // Reset all dots to the default size
      dotItems.forEach((dot) => {
        dot.style.width = '8px';
        dot.style.height = '8px';
      });

      // Scale the current dot and next dot based on scroll position
      if (dotItems[currentIndex]) {
        dotItems[currentIndex].style.width = `${48 - percentageScrolled * 40}px`;
      }

      if (dotItems[currentIndex + 1]) {
        dotItems[currentIndex + 1].style.width = `${8 + percentageScrolled * 40}px`;
      }

      // Update the banner content based on the exact current index
      updateBannerContent(Math.round(scrollPosition / galleryWidth));
    };

    // Throttled scroll handler using requestAnimationFrame
    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateDotScaling();
          ticking = false;
        });
        ticking = true;
      }
    };

    // Autoplay function
  const startAutoplay = () => {
  container.classList.add('no-snap'); // Disable snapping during autoplay
  autoplayInterval = setInterval(() => {
    const cardWidth = cards[0].offsetWidth;
    const currentScroll = container.scrollLeft;
    const maxScroll = cardWidth * (cards.length - 1);

    // Determine the next index
    const currentIndex = Math.round(currentScroll / cardWidth);
    const nextIndex = currentIndex >= cards.length - 1 ? 0 : currentIndex + 1;

    // Scroll to the next slide
    container.scrollTo({
      left: nextIndex * cardWidth,
      behavior: 'smooth'
    });

    // Update banner content
    updateBannerContent(nextIndex);

    // Reset scroll position if at the end
    if (currentScroll >= maxScroll) {
      setTimeout(() => {
        container.scrollLeft = 0;
      }, 300);
    }
  }, AUTOPLAY_INTERVAL);
  };

  const stopAutoplay = () => {
  container.classList.remove('no-snap'); // Re-enable snapping after autoplay
  clearInterval(autoplayInterval);
  };

    // Listen to scroll events on the container
    container.addEventListener('scroll', onScroll);

    // Add click event listener to the dots
    dotItems.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        const cardWidth = cards[0].offsetWidth;
        container.scrollTo({
          left: index * cardWidth,
          behavior: 'smooth',
        });

        // Update the banner content and active dot after the scroll
        setTimeout(() => {
          updateBannerContent(index);
          dotItems.forEach((dot) => {
            dot.style.width = '8px';
            dot.style.height = '8px';
          });
          dot.style.width = '48px';
          dot.style.height = '48px';
        }, 300);

        // Restart autoplay after manual interaction
        if (autoplayEnabled) {
          stopAutoplay();
          startAutoplay();
        }
      });
    });

    // Expand button functionality for showing/hiding banner details
    if (infoBannerExpandButton) {
      infoBannerExpandButton.addEventListener('click', () => {
        infoBannerDetails.classList.toggle('show');
        infoBannerExpandButton.classList.toggle('show');
      });
    }

    // Set up initial state
    dotItems[0].style.width = '48px'; // The first dot starts as the active one
    updateBannerContent(0); // Initialize banner content with the first card

    // Start autoplay if enabled
    if (autoplayEnabled) {
      startAutoplay();

      // Pause autoplay on hover
      section.addEventListener('mouseenter', stopAutoplay);
      section.addEventListener('mouseleave', startAutoplay);
    }




  });
  });
</script>

{% schema %}
  {
    "name": "Image With Text",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "color",
        "id": "sectionBackground",
        "label": "Section Color"
      }, {
        "type": "color_scheme",
        "label": "Banner Color",
        "id": "bannerColor",
        "default": "#000000"
      }, {
        "type": "checkbox",
        "id": "autoplay",
        "label": "Enable Autoplay",
        "default": true
      }
    ],
    "blocks": [
      {
        "type": "card",
        "name": "Card",
        "settings": [
          {
            "type": "image_picker",
            "id": "image",
            "label": "Select Image"
          },
          {
            "type": "text",
            "id": "headingTag",
            "label": "Heading Tag",
            "default": "New Arrival"
          },
          {
            "type": "text",
            "id": "heading",
            "label": "Heading",
            "default": "Thanksgiving big billion sale!"
          },
          {
            "type": "text",
            "id": "description",
            "label": "Description",
            "default": "Enhance patient care with our premium medical product, featuring advanced technology for precision and reliability. Ideal for seamless integration into any practice!"
          }, {
            "type": "text",
            "id": "btnText",
            "label": "Button Text",
            "default": "Shop Now"
          }, {
            "type": "url",
            "id": "url",
            "label": "link",
            "default": "/"
          }

        ]
      }
    ],
    "presets": [
      {
        "name": "Image With Text",
        "blocks": [
          {
            "type": "card"
          }, {
            "type": "card"
          }, {
            "type": "card"
          }, {
            "type": "card"
          }
        ]
      }
    ]
  }
{% endschema %}